{"is_source_file": true, "format": "Python", "description": "This Python source file defines FastAPI route handlers for CRUD operations on notes, including creation, retrieval, updating, listing, and deletion. It utilizes a NotesService for business logic and models for data validation and serialization.", "external_files": ["../services/notes_service", "../models/note_models"], "external_methods": ["NotesService.create_note", "NotesService.get_note", "NotesService.replace_note", "NotesService.update_note", "NotesService.delete_note", "NoteOut.model_validate", "NoteCreate", "NoteUpdate", "NoteOut", "PaginatedNotes"], "published": ["router", "create_note", "list_notes", "get_note", "replace_note", "update_note", "delete_note"], "classes": [], "methods": [{"name": "NoteOut create_note(payload: NoteCreate)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "None delete_note( note_id: str = Path(..., description=\"The unique ID of the note.\"), )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "NoteOut get_note( note_id: str = Path(..., description=\"The unique ID of the note.\"), )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "PaginatedNotes list_notes( q: Optional[str] = Query( default=None, description=\"Search query to filter notes by title or content.\", ), limit: int = Query(default=20, ge=1, le=100, description=\"Max items to return.\"), offset: int = Query(default=0, ge=0, description=\"Number of items to skip.\"), )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "NoteOut replace_note( note_id: str = Path(..., description=\"The unique ID of the note.\"), payload: NoteCreate = ..., )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "NoteOut update_note( note_id: str = Path(..., description=\"The unique ID of the note.\"), payload: NoteUpdate = ..., )", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["NotesService.create_note", "NotesService.get_note", "NotesService.replace_note", "NotesService.update_note", "NotesService.delete_note", "NoteOut.model_validate", "NoteOut.model_dump", "raise HTTPException"], "search-terms": ["FastAPI", "notes CRUD", "notes API router", "NotesService", "note models", "REST endpoints", "/notes", "/notes/{note_id}"], "state": 2, "file_id": 6, "knowledge_revision": 37, "git_revision": "3f6916e8e39cd55be2a4e15344dfc80f2e32c802", "revision_history": [{"14": ""}, {"37": "3f6916e8e39cd55be2a4e15344dfc80f2e32c802"}], "ctags": [{"_type": "tag", "name": "_service", "path": "/home/kavia/workspace/code-generation/note-keeper-167398-167416/notes_backend/src/api/routers/notes.py", "pattern": "/^_service = NotesService()  # service encapsulates business logic and repository access$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "create_note", "path": "/home/kavia/workspace/code-generation/note-keeper-167398-167416/notes_backend/src/api/routers/notes.py", "pattern": "/^def create_note(payload: NoteCreate) -> NoteOut:$/", "language": "Python", "typeref": "typename:NoteOut", "kind": "function", "signature": "(payload: NoteCreate)"}, {"_type": "tag", "name": "delete_note", "path": "/home/kavia/workspace/code-generation/note-keeper-167398-167416/notes_backend/src/api/routers/notes.py", "pattern": "/^def delete_note($/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "( note_id: str = Path(..., description=\"The unique ID of the note.\"), )"}, {"_type": "tag", "name": "get_note", "path": "/home/kavia/workspace/code-generation/note-keeper-167398-167416/notes_backend/src/api/routers/notes.py", "pattern": "/^def get_note($/", "language": "Python", "typeref": "typename:NoteOut", "kind": "function", "signature": "( note_id: str = Path(..., description=\"The unique ID of the note.\"), )"}, {"_type": "tag", "name": "list_notes", "path": "/home/kavia/workspace/code-generation/note-keeper-167398-167416/notes_backend/src/api/routers/notes.py", "pattern": "/^def list_notes($/", "language": "Python", "typeref": "typename:PaginatedNotes", "kind": "function", "signature": "( q: Optional[str] = Query( default=None, description=\"Search query to filter notes by title or content.\", ), limit: int = Query(default=20, ge=1, le=100, description=\"Max items to return.\"), offset: int = Query(default=0, ge=0, description=\"Number of items to skip.\"), )"}, {"_type": "tag", "name": "replace_note", "path": "/home/kavia/workspace/code-generation/note-keeper-167398-167416/notes_backend/src/api/routers/notes.py", "pattern": "/^def replace_note($/", "language": "Python", "typeref": "typename:NoteOut", "kind": "function", "signature": "( note_id: str = Path(..., description=\"The unique ID of the note.\"), payload: NoteCreate = ..., )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/note-keeper-167398-167416/notes_backend/src/api/routers/notes.py", "pattern": "/^router = APIRouter()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "update_note", "path": "/home/kavia/workspace/code-generation/note-keeper-167398-167416/notes_backend/src/api/routers/notes.py", "pattern": "/^def update_note($/", "language": "Python", "typeref": "typename:NoteOut", "kind": "function", "signature": "( note_id: str = Path(..., description=\"The unique ID of the note.\"), payload: NoteUpdate = ..., )"}], "hash": "a638b69c2a7159a99aec3d15f4bf0670", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/src/api/routers/notes.py", "fields": [{"name": "_service = NotesService()  # service encapsulates business logic and repository access", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "router = APIRouter()", "scope": "", "scopeKind": "", "description": "unavailable"}]}