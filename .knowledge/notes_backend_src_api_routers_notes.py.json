{"is_source_file": true, "format": "Python (FastAPI)", "description": "This file defines API endpoints for note management operations such as create, list, retrieve, update, and delete notes. It uses FastAPI's route decorators and relies on a NotesService for business logic.", "external_files": ["../services/notes_service.py", "../models/note_models.py"], "external_methods": ["NotesService.create_note", "NotesService.list_notes", "NotesService.get_note", "NotesService.replace_note", "NotesService.update_note", "NotesService.delete_note"], "published": ["router"], "classes": [{"name": "NoteCreate", "description": "Model representing data needed to create a new note."}, {"name": "NoteUpdate", "description": "Model for partial updates to a note."}, {"name": "Note", "description": "Model representing a note entity."}, {"name": "NoteOut", "description": "Model for outputting note data, possibly a serialized version."}, {"name": "PaginatedNotes", "description": "Model for paginated list of notes."}], "methods": [{"name": "NoteOut create_note(payload: NoteCreate)", "description": "Handles POST requests to create a new note.", "scope": "", "scopeKind": ""}, {"name": "PaginatedNotes list_notes( q: Optional[str] = Query( default=None, description=\"Search query to filter notes by title or content.\", ), limit: int = Query(default=20, ge=1, le=100, description=\"Max items to return.\"), offset: int = Query(default=0, ge=0, description=\"Number of items to skip.\"), )", "description": "Handles GET requests to list notes with optional search and pagination.", "scope": "", "scopeKind": ""}, {"name": "NoteOut get_note( note_id: str = Path(..., description=\"The unique ID of the note.\"), )", "description": "Retrieves a specific note by its ID.", "scope": "", "scopeKind": ""}, {"name": "NoteOut replace_note( note_id: str = Path(..., description=\"The unique ID of the note.\"), payload: NoteCreate = ..., )", "description": "Replaces an existing note entirely by ID.", "scope": "", "scopeKind": ""}, {"name": "NoteOut update_note( note_id: str = Path(..., description=\"The unique ID of the note.\"), payload: NoteUpdate = ..., )", "description": "Partially updates an existing note.", "scope": "", "scopeKind": ""}, {"name": "None delete_note( note_id: str = Path(..., description=\"The unique ID of the note.\"), )", "description": "Deletes a note by ID.", "scope": "", "scopeKind": ""}], "calls": ["NotesService.create_note", "NotesService.list_notes", "NotesService.get_note", "NotesService.replace_note", "NotesService.update_note", "NotesService.delete_note"], "search-terms": ["notes_rest_api", "note CRUD endpoints", "FastAPI notes router", "notes management API"], "state": 2, "file_id": 6, "knowledge_revision": 14, "git_revision": "", "ctags": [{"_type": "tag", "name": "_service", "path": "/home/kavia/workspace/code-generation/note-keeper-167398-167416/notes_backend/src/api/routers/notes.py", "pattern": "/^_service = NotesService()  # service encapsulates business logic and repository access$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "create_note", "path": "/home/kavia/workspace/code-generation/note-keeper-167398-167416/notes_backend/src/api/routers/notes.py", "pattern": "/^def create_note(payload: NoteCreate) -> NoteOut:$/", "language": "Python", "typeref": "typename:NoteOut", "kind": "function", "signature": "(payload: NoteCreate)"}, {"_type": "tag", "name": "delete_note", "path": "/home/kavia/workspace/code-generation/note-keeper-167398-167416/notes_backend/src/api/routers/notes.py", "pattern": "/^def delete_note($/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "( note_id: str = Path(..., description=\"The unique ID of the note.\"), )"}, {"_type": "tag", "name": "get_note", "path": "/home/kavia/workspace/code-generation/note-keeper-167398-167416/notes_backend/src/api/routers/notes.py", "pattern": "/^def get_note($/", "language": "Python", "typeref": "typename:NoteOut", "kind": "function", "signature": "( note_id: str = Path(..., description=\"The unique ID of the note.\"), )"}, {"_type": "tag", "name": "list_notes", "path": "/home/kavia/workspace/code-generation/note-keeper-167398-167416/notes_backend/src/api/routers/notes.py", "pattern": "/^def list_notes($/", "language": "Python", "typeref": "typename:PaginatedNotes", "kind": "function", "signature": "( q: Optional[str] = Query( default=None, description=\"Search query to filter notes by title or content.\", ), limit: int = Query(default=20, ge=1, le=100, description=\"Max items to return.\"), offset: int = Query(default=0, ge=0, description=\"Number of items to skip.\"), )"}, {"_type": "tag", "name": "replace_note", "path": "/home/kavia/workspace/code-generation/note-keeper-167398-167416/notes_backend/src/api/routers/notes.py", "pattern": "/^def replace_note($/", "language": "Python", "typeref": "typename:NoteOut", "kind": "function", "signature": "( note_id: str = Path(..., description=\"The unique ID of the note.\"), payload: NoteCreate = ..., )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/note-keeper-167398-167416/notes_backend/src/api/routers/notes.py", "pattern": "/^router = APIRouter()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "update_note", "path": "/home/kavia/workspace/code-generation/note-keeper-167398-167416/notes_backend/src/api/routers/notes.py", "pattern": "/^def update_note($/", "language": "Python", "typeref": "typename:NoteOut", "kind": "function", "signature": "( note_id: str = Path(..., description=\"The unique ID of the note.\"), payload: NoteUpdate = ..., )"}], "hash": "771f3562975b8903b16d1f2b64036619", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/src/api/routers/notes.py", "fields": [{"name": "_service = NotesService()  # service encapsulates business logic and repository access", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "router = APIRouter()", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"14": ""}]}